This notes contain all the important info gathered during the development of this project. I have code out of the box 
by Max but Redux hasn't applied yet. In this we learn step by step how to apply redux and work with react-redux library.

Tag v1.1 - 

* * Set 1 work flow

1. Steps in general for redux :
   * The state is the universal state and is called central store. To the store, we pass reducer.
   * That reducer which we pass to store is called root reducer. We can combine multiple reducers into one, and 
     that combined one becomes the root reducer which is then passed into the store.
   * The action is dispatched into the reducer and the logic is written inside reducer which updates the store.
   * For example, if we want to increment the counter (counter is in store), then we dispatch increment action and 
     the increment logic is written in the reducer. This updates the store.

2. Let's now apply redux by installing the packages below:
    * npm install --save redux ---> for redux alone

   It's better to define the central store in index.js since that is where the application starts.  
   Here in index.js we define store and pass reducer as an argument as discussed in 1. above. The reducer code is 
   not stored here since it might grow, hence lets create a store folder and put the code there for reducer. We import 
   into index.js and pass it to store.
   Note : Reducer is a function that takes state and an action.  
   Let's next connect react to redux.

3. Let's connect redux to react. 
    * npm install --save react-redux ---> for react to work with redux
   Provider is imported from react-redux and this is wrapped around <App/> in the index.js. This Provider is used to 
   connect react to redux. 
   We then use connect (function that returns a hoc) to connect react component (where we need the data to be passed from/to store). In short, 
   all the components which likes to get the updates from store and send the data to the store via reducer needs to 
   be wrapped with connect function which returns a hoc.
   We pass two arguments to connect. The first one is mapStateToProps meaning which part of the state is important to us,
   and which actions do we need to dispatch.

4. Now that we have connected store to our Counter component through mapStateToProps, we will now dispatch actions to 
   modify the value of the counter in the store on the button clicks like increment, decrement and so on. Note that type
   is important and must be present in dispatch method.

5. We have dispatched INCREMENT function. Let's now implement dispatch actions for DECREMENT, ADD, and SUBTRACT.
   After implementing them, we now can remove the local state in Counter component which holds counter (we now get that)
   from store, and can also remove the logic responsible to modify the counter in Counter.js. 

6. We have hardcoded the number into the ADD and SUBTRACT actions but it would be good if we pass this as an argument.
   Let's implement this now.

7. Let's replace if statements with switch statements in the reducer. This makes code more readable.

8. Adding a button to store the result now. When we click this btn, we need the current result (at that particular time) 
   to be displayed on the unordered list below.